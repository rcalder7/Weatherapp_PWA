"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fetch = require('node-fetch');

var uuidv4 = require('uuid/v4');

var _createWeatherNode =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(latitude, longitude, createNodeId, createContentDigest, createNode, configOptions, locationName) {
    var _processWeather, key, exclude, apiUrl, response, data, nodeData;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _processWeather = function _processWeather(weather) {
              var nodeId = createNodeId(`weather-data-${uuidv4()}`);
              var nodeContent = JSON.stringify(weather);
              var nodeData = Object.assign({}, weather, {
                id: nodeId,
                parent: null,
                children: [],
                internal: {
                  type: 'WeatherData',
                  content: nodeContent,
                  contentDigest: createContentDigest(weather)
                }
              });
              return nodeData;
            };

            key = configOptions.key, exclude = configOptions.exclude;
            exclude = exclude.join(',');
            apiUrl = `https://api.darksky.net/forecast/${key}/${latitude},${longitude}?exclude=${exclude}`;
            _context.next = 6;
            return fetch(apiUrl);

          case 6:
            response = _context.sent;
            _context.next = 9;
            return response.json();

          case 9:
            data = _context.sent;
            nodeData = _processWeather(data);
            nodeData.locationName = locationName || '';
            createNode(nodeData);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function _createWeatherNode(_x, _x2, _x3, _x4, _x5, _x6, _x7) {
    return _ref.apply(this, arguments);
  };
}();

exports.sourceNodes =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(_ref2, configOptions) {
    var actions, createNodeId, createContentDigest, createNode, latitude, longitude;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            actions = _ref2.actions, createNodeId = _ref2.createNodeId, createContentDigest = _ref2.createContentDigest;
            createNode = actions.createNode;
            delete configOptions.plugins;

            if (!configOptions.latitude) {
              _context3.next = 9;
              break;
            }

            latitude = configOptions.latitude, longitude = configOptions.longitude;
            _context3.next = 7;
            return _createWeatherNode(latitude, longitude, createNodeId, createContentDigest, createNode, configOptions);

          case 7:
            _context3.next = 10;
            break;

          case 9:
            exports.onCreateNode =
            /*#__PURE__*/
            function () {
              var _ref5 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee2(_ref4) {
                var node, parsedContent, locationName, _parsedContent$result, _latitude, _longitude;

                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        node = _ref4.node;

                        if (!node.internal.content) {
                          _context2.next = 8;
                          break;
                        }

                        parsedContent = JSON.parse(node.internal.content);

                        if (!(parsedContent.results && Array.isArray(parsedContent.results) && parsedContent.results[0].geometry)) {
                          _context2.next = 8;
                          break;
                        }

                        locationName = parsedContent.results[0].formatted_address;
                        _parsedContent$result = parsedContent.results[0].geometry.location, _latitude = _parsedContent$result.lat, _longitude = _parsedContent$result.lng;
                        _context2.next = 8;
                        return _createWeatherNode(_latitude, _longitude, createNodeId, createContentDigest, createNode, configOptions, locationName);

                      case 8:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));

              return function (_x10) {
                return _ref5.apply(this, arguments);
              };
            }();

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function (_x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();